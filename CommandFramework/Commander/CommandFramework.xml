<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CommandFramework</name>
    </assembly>
    <members>
        <member name="T:CommandFramework.API.Enums.ArgumentMatch">
            <summary>
                Holds the matching arguments. NOT WOKRING, WIP!!!.
            </summary>
            <remarks>
                Holds the different arguments on how the command handler can match a phrase.
            </remarks>
        </member>
        <member name="F:CommandFramework.API.Enums.ArgumentMatch.Undefined">
            <inheritdoc/>
        </member>
        <member name="T:CommandFramework.API.Enums.AutoTypes">
            <summary>
                Holds the allowed auto types.
            </summary>
        </member>
        <member name="F:CommandFramework.API.Enums.AutoTypes.Undefined">
            <summary>
                The undefined value, indicates the enum hasn't been set yet.
            </summary>
        </member>
        <member name="T:CommandFramework.Managers.Models.Channels">
            <summary>
                All locations of where the command could be used...
            </summary>
        </member>
        <member name="F:CommandFramework.Managers.Models.Channels.Undefined">
            <summary>
                The undefined value, indicates the enum hasn't been set yet.
            </summary>
        </member>
        <member name="F:CommandFramework.Managers.Models.Channels.Ship">
            <summary>
                Allow command on ship.
            </summary>
        </member>
        <member name="F:CommandFramework.Managers.Models.Channels.Meeting">
             <summary>
                 Allow command in meetings.
             </summary>
            
        </member>
        <member name="F:CommandFramework.Managers.Models.Channels.Ghost">
            <summary>
                Allow command while ghost.
            </summary>
        </member>
        <member name="F:CommandFramework.Managers.Models.Channels.All">
            <summary>
                Allow command everywhere.
            </summary>
        </member>
        <member name="T:CommandFramework.Managers.Models.ShowStates">
            <summary>
                The show states.
            </summary>
            <remarks>
                Holds the different entites the user can show a command to.
                Select multiple using the bitwise " | ".
            </remarks>
        </member>
        <member name="F:CommandFramework.Managers.Models.ShowStates.Undefined">
            <summary>
                The undefined value, indicates the enum hasn't been set yet.
            </summary>
        </member>
        <member name="F:CommandFramework.Managers.Models.ShowStates.Server">
            <summary>
                Log to server.
            </summary>
        </member>
        <member name="F:CommandFramework.Managers.Models.ShowStates.Host">
            <summary>
                Log to host.
            </summary>
        </member>
        <member name="F:CommandFramework.Managers.Models.ShowStates.Lobby">
            <summary>
                Log to lobby.
            </summary>
        </member>
        <member name="F:CommandFramework.Managers.Models.ShowStates.Self">
            <summary>
                Log to self.
            </summary>
            <remarks>
                Represents the user who sent the original command.
            </remarks>
        </member>
        <member name="F:CommandFramework.Managers.Models.ShowStates.None">
            <summary>
                Log to nobody.
            </summary>
        </member>
        <member name="F:CommandFramework.Managers.Models.ShowStates.All">
            <summary>
                Log to everybody.
            </summary>
        </member>
        <member name="T:CommandFramework.Managers.Models.IArgumentGenerator">
            <summary>
                Holds all the data that pertains to the <see cref="T:CommandFramework.Managers.Models.IArgumentGenerator"/> class.
            </summary>
        </member>
        <member name="P:CommandFramework.Managers.Models.IArgumentGenerator.Comamnd">
            <summary>
                Gets the command this argument belongs to.
            </summary>
        </member>
        <member name="P:CommandFramework.Managers.Models.IArgumentGenerator.Handler">
            <summary>
                Gets the command handler.
            </summary>
        </member>
        <member name="P:CommandFramework.Managers.Models.IArgumentGenerator.Default">
            <summary>
                Gets or Sets the default argument value.
            </summary>
        </member>
        <member name="P:CommandFramework.Managers.Models.IArgumentGenerator.Limit">
            <summary>
                Gets or Sets the amount of phrases to match for rest, separate, content, or text match.
            </summary>
        </member>
        <member name="P:CommandFramework.Managers.Models.IArgumentGenerator.Match">
            <summary>
                Gets or sets argument matcher.
            </summary>
        </member>
        <member name="P:CommandFramework.Managers.Models.IArgumentGenerator.Prompt">
            <summary>
                Gets or Sets the default <see cref="T:CommandFramework.Managers.Models.PromptOptions"/>.
            </summary>
        </member>
        <member name="P:CommandFramework.Managers.Models.IArgumentGenerator.AutoType">
            <summary>
                Gets or sets the auto type.
            </summary>
            <remarks>
                Setting an auto type will work with validate. Multiple autotypes are allowed.
            </remarks>
        </member>
        <member name="T:CommandFramework.Managers.Models.ICommandHandlerOptions">
            <summary>
                Holds all the data that pertains to the <see cref="T:CommandFramework.Managers.Models.CommandHandler"/> class.
            </summary>
            <remarks>
                Implements <see cref="T:CommandFramework.Managers.Models.IOptions"/>.
            </remarks>
        </member>
        <member name="P:CommandFramework.Managers.Models.ICommandHandlerOptions.Logger">
            <summary>
                Gets or Sets an instance of the <see cref="T:Microsoft.Extensions.Logging.ILogger"/>.
            </summary>
            <remarks>
                Used to log any messages to the server console.
            </remarks>
        </member>
        <member name="P:CommandFramework.Managers.Models.ICommandHandlerOptions.CommandMatching">
            <summary>
                Gets or sets the the function that helps match the command to a module. WIP!!! WIP!!! WIP!!!.
            </summary>
            <remarks>
                <see cref="T:Impostor.Api.Events.Player.IPlayerChatEvent"/> playerChatEvent - the player chat event that was sent from the command.
            </remarks>
            <returns>
                A boolean indicating whether the command matches a module.
            </returns>
        </member>
        <member name="P:CommandFramework.Managers.Models.ICommandHandlerOptions.PublicCooldown">
            <summary>
                Gets or Sets the public command cooldown.
            </summary>
            <remarks>
                This cooldown controls the cooldown for all the commands. If this cooldown is active no commands can be used until its finished.
            </remarks>
        </member>
        <member name="P:CommandFramework.Managers.Models.ICommandHandlerOptions.Directory">
            <summary>
                Gets or Sets the directory that holds all the command modules.
            </summary>
        </member>
        <member name="P:CommandFramework.Managers.Models.ICommandHandlerOptions.SearchAllDirectories">
            <summary>
                Gets or Sets a value indicating whether to search the directories within the directory.
            </summary>
            <remarks>
                Will cause lag if the commands folder is store on a high level directory and this is set to true.
            </remarks>
        </member>
        <member name="T:CommandFramework.Managers.Models.ICommandOptions">
            <summary>
                Holds all the data that pertains to the <see cref="T:CommandFramework.Managers.Models.Command"/> class.
            </summary>
            <remarks>
                Implements <see cref="T:CommandFramework.Managers.Models.IOptions"/>.
            </remarks>
        </member>
        <member name="P:CommandFramework.Managers.Models.ICommandOptions.Aliases">
            <summary>
                Gets or sets the allowed command aliases.
            </summary>
        </member>
        <member name="P:CommandFramework.Managers.Models.ICommandOptions.Args">
            <summary>
            Gets or Sets the command arguments.
            </summary>
        </member>
        <member name="T:CommandFramework.Managers.Models.IOptions">
            <summary>
                Holds the common options for <see cref="T:CommandFramework.Managers.Models.ICommandHandlerOptions"/> and <see cref="T:CommandFramework.Managers.Models.ICommandOptions"/>.
            </summary>
        </member>
        <member name="P:CommandFramework.Managers.Models.IOptions.SplitAt">
            <summary>
                Gets or sets the command splitting point.
            </summary>
        </member>
        <member name="P:CommandFramework.Managers.Models.IOptions.PrefixS">
            <summary>
                Gets or sets the prefix to a string.
            </summary>
        </member>
        <member name="P:CommandFramework.Managers.Models.IOptions.PrefixSA">
            <summary>
                Gets or sets the prefix to a string array.
            </summary>
        </member>
        <member name="P:CommandFramework.Managers.Models.IOptions.PrefixFS">
            <summary>
                Gets or sets the prefix to a function that will return a prefix.
            </summary>
            <remarks>
                <see cref="T:Impostor.Api.Events.Player.IPlayerChatEvent"/> playerChatEvent - the player chat event that was sent from the command.
            </remarks>
            <returns>
                A prefix in the form of a string.
            </returns>
        </member>
        <member name="P:CommandFramework.Managers.Models.IOptions.PrefixFSA">
            <summary>
                Gets or sets the prefix to a function that will return a array of allowed prefixes.
            </summary>
            <remarks>
                <see cref="T:Impostor.Api.Events.Player.IPlayerChatEvent"/> playerChatEvent - the player chat event that was sent from the command.
            </remarks>
            <returns>
                An array of allowed prefixes in the form of a string.
            </returns>
        </member>
        <member name="P:CommandFramework.Managers.Models.IOptions.PromptOpts">
            <summary>
                Gets or Sets the default <see cref="T:CommandFramework.Managers.Models.PromptOptions"/>.
            </summary>
        </member>
        <member name="P:CommandFramework.Managers.Models.IOptions.ShowChatTo">
            <summary>
                Gets or Sets the allowed entities to show the input command to.
            </summary>
        </member>
        <member name="P:CommandFramework.Managers.Models.IOptions.ShowResponseTo">
            <summary>
                Gets or Sets the allowed entities to show the output responding to.
            </summary>
        </member>
        <member name="P:CommandFramework.Managers.Models.IOptions.IndividualCooldown">
            <summary>
                Gets or Sets the command cooldown for individual player.
            </summary>
            <remarks>
                Controls the cooldown for each individual player, this just prevents command spam from a player.
            </remarks>
        </member>
        <member name="P:CommandFramework.Managers.Models.IOptions.CommandCooldown">
            <summary>
                Gets or Sets the command cooldown for the command.
            </summary>
            <remarks>
                Controls the cooldown for the command in general. Works best for a information command or a expensive resource wise command.
            </remarks>
        </member>
        <member name="P:CommandFramework.Managers.Models.IOptions.IgnoreCooldown">
            <summary>
                Gets or sets the the ignore cooldown to a function that will return a boolean.
            </summary>
            <remarks>
                <see cref="T:Impostor.Api.Events.Player.IPlayerChatEvent"/> playerChatEvent - the player chat event that was sent from the command.
            </remarks>
            <returns>
                A boolean indicating whether the client can ignore the cooldown.
            </returns>
        </member>
        <member name="T:CommandFramework.Managers.Models.IPermissions">
            <summary>
                Holds all the data that pertains to the <see cref="T:CommandFramework.Managers.Models.Permissions"/> class.
            </summary>
        </member>
        <member name="T:CommandFramework.Managers.Models.IPromptOptions">
            <summary>
                Holds all the data that pertains to the <see cref="T:CommandFramework.Managers.Models.PromptOptions"/> class.
            </summary>
        </member>
        <member name="P:CommandFramework.Managers.Models.IPromptOptions.Start">
            <summary>
                Gets or sets the text sent on start of prompt.
            </summary>
        </member>
        <member name="P:CommandFramework.Managers.Models.IPromptOptions.Retry">
            <summary>
                 Gets or sets the text sent on a retry (failure to cast type).
            </summary>
        </member>
        <member name="P:CommandFramework.Managers.Models.IPromptOptions.Ended">
            <summary>
                Gets or sets text sent on amount of tries reaching the max.
            </summary>
        </member>
        <member name="P:CommandFramework.Managers.Models.IPromptOptions.Cancel">
            <summary>
                Gets or sets text sent on cancellation of command.
            </summary>
        </member>
        <member name="P:CommandFramework.Managers.Models.IPromptOptions.Cancelword">
            <summary>
                Gets or sets word to use for cancelling the command.
            </summary>
        </member>
        <member name="P:CommandFramework.Managers.Models.IPromptOptions.Timeout">
            <summary>
                 Gets or sets text sent on collector time out.
            </summary>
        </member>
        <member name="P:CommandFramework.Managers.Models.IPromptOptions.Retries">
            <summary>
                 Gets or sets amount of retries allowed.
            </summary>
        </member>
        <member name="P:CommandFramework.Managers.Models.IPromptOptions.Time">
            <summary>
                Gets or sets time to wait for input.
            </summary>
        </member>
        <member name="P:CommandFramework.Managers.Models.IPromptOptions.Stopword">
            <summary>
                Gets or sets word to use for ending infinite prompts.
            </summary>
        </member>
        <member name="P:CommandFramework.Managers.Models.IPromptOptions.Infinite">
            <summary>
                Gets or sets a value indicating whether infinite prompts are allowed.
            </summary>
            <remarks>
                While true prompts forever until the stop word, cancel word, time limit, or retry limit. Note that the retry count resets back to one on each valid entry. The final evaluated argument will be an array of the inputs.
            </remarks>
        </member>
        <member name="P:CommandFramework.Managers.Models.IPromptOptions.Limit">
            <summary>
                Gets or sets amount of inputs allowed for an infinite prompt before finishing.
            </summary>
        </member>
        <member name="P:CommandFramework.Managers.Models.IPromptOptions.Otherwise">
            <summary>
                Gets or sets default text sent if argument parsing fails.
            </summary>
        </member>
        <member name="T:CommandFramework.Managers.Models.ArgumentGenerator">
            <summary>
                Represents an argument for a command.
            </summary>
            <remarks>
                Implements <see cref="T:CommandFramework.Managers.Models.IArgumentGenerator"/>.
            </remarks>
        </member>
        <member name="M:CommandFramework.Managers.Models.ArgumentGenerator.#ctor(System.String,CommandFramework.Managers.Models.CommandHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandFramework.Managers.Models.ArgumentGenerator"/> class.
            </summary>
            <param name="comamnd"> The main command alias.</param>
            <param name="handler"> The command handler attached to the Command.</param>
        </member>
        <member name="P:CommandFramework.Managers.Models.ArgumentGenerator.Comamnd">
            <inheritdoc/>
        </member>
        <member name="P:CommandFramework.Managers.Models.ArgumentGenerator.Handler">
            <inheritdoc/>
        </member>
        <member name="P:CommandFramework.Managers.Models.ArgumentGenerator.Default">
            <inheritdoc/>
        </member>
        <member name="P:CommandFramework.Managers.Models.ArgumentGenerator.Limit">
            <inheritdoc/>
        </member>
        <member name="P:CommandFramework.Managers.Models.ArgumentGenerator.Match">
            <inheritdoc/>
        </member>
        <member name="P:CommandFramework.Managers.Models.ArgumentGenerator.Prompt">
            <inheritdoc/>
        </member>
        <member name="P:CommandFramework.Managers.Models.ArgumentGenerator.AutoType">
            <inheritdoc/>
        </member>
        <member name="T:CommandFramework.Managers.Models.Command">
            <summary>
                Provides a base Command class to extend onto.
            </summary>
            <remarks>
                Extends <see cref="T:CommandFramework.Managers.Models.CommandOptions"/>.
            </remarks>
        </member>
        <member name="M:CommandFramework.Managers.Models.Command.#ctor(System.String,CommandFramework.Managers.Models.ICommandOptions)">
            <summary>
                Initializes a new instance of the <see cref="T:CommandFramework.Managers.Models.Command"/> class.
            </summary>
            <param name="command">Main command alias.</param>
            <param name="commandOptions">A instance of the <see cref="T:CommandFramework.Managers.Models.ICommandOptions"/> interface to set to.</param>
        </member>
        <member name="P:CommandFramework.Managers.Models.Command.Handler">
            <summary>
                Gets the handler that the <see cref="T:CommandFramework.Managers.Models.Command"/> uses.
            </summary>
        </member>
        <member name="P:CommandFramework.Managers.Models.Command.MainCommand">
            <summary>
                Gets the main command alias.
            </summary>
        </member>
        <member name="M:CommandFramework.Managers.Models.Command.Arguments(System.String,Impostor.Api.Events.Player.IPlayerChatEvent)">
            <summary>
                Generates a <see cref="T:CommandFramework.Managers.Models.ArgumentGenerator"/> for each phrase.
            </summary>
            <remarks>
                Overwrites this.Args if used.
            </remarks>
            <param name="message">The message actually sent.</param>
            <param name="playerChatEvent">The player chat event.</param>
            <returns>A IEnumerable of ArgumentGenerators.</returns>
        </member>
        <member name="M:CommandFramework.Managers.Models.Command.Before(Impostor.Api.Events.Player.IPlayerChatEvent)">
            <summary>
                Runs before the <see cref="M:CommandFramework.Managers.Models.Command.Arguments(System.String,Impostor.Api.Events.Player.IPlayerChatEvent)"/> gets called.
            </summary>
            <remarks>
                Use this if you want to make changes to the actual message before it gets ran through <see cref="M:CommandFramework.Managers.Models.Command.Arguments(System.String,Impostor.Api.Events.Player.IPlayerChatEvent)"/>. Setting this to an empty string will cancel the command.
            </remarks>
            <param name="playerChatEvent">The player chat event.</param>
            <returns>Returns an updated message or the same message.</returns>
        </member>
        <member name="M:CommandFramework.Managers.Models.Command.Execute(Impostor.Api.Events.Player.IPlayerChatEvent,System.Object[])">
             <summary>
                 Executes after arguments.
             </summary>
            
             <remarks>
                 This is where you should put the main code of the command, this gets called after <see cref="M:CommandFramework.Managers.Models.Command.Before(Impostor.Api.Events.Player.IPlayerChatEvent)"/> and <see cref="M:CommandFramework.Managers.Models.Command.Arguments(System.String,Impostor.Api.Events.Player.IPlayerChatEvent)"/> .
             </remarks>
             <param name="playerChatEvent">The player chat event.</param>
             <param name="arguments">The arguments passed from <see cref="M:CommandFramework.Managers.Models.Command.Arguments(System.String,Impostor.Api.Events.Player.IPlayerChatEvent)"/>.</param>
        </member>
        <member name="T:CommandFramework.Managers.Models.CommandHandler">
            <summary>
                Command Handler, holds some command settings that will apply to every command.
            </summary>
        </member>
        <member name="P:CommandFramework.Managers.Models.CommandHandler.Logger">
            <inheritdoc/>
        </member>
        <member name="P:CommandFramework.Managers.Models.CommandHandler.CommandMatching">
            <inheritdoc/>
        </member>
        <member name="P:CommandFramework.Managers.Models.CommandHandler.PublicCooldown">
            <inheritdoc/>
        </member>
        <member name="P:CommandFramework.Managers.Models.CommandHandler.Directory">
            <inheritdoc/>
        </member>
        <member name="P:CommandFramework.Managers.Models.CommandHandler.SearchAllDirectories">
            <inheritdoc/>
        </member>
        <member name="P:CommandFramework.Managers.Models.CommandHandler.SplitAt">
            <inheritdoc/>
        </member>
        <member name="P:CommandFramework.Managers.Models.CommandHandler.Prefix">
            <summary>
                Gets the Prefix in object form.
            </summary>
            <remarks>
                Note: This should be grabbed via <see cref="P:CommandFramework.Managers.Models.CommandHandler.PrefixS"/>, <see cref="P:CommandFramework.Managers.Models.CommandHandler.PrefixSA"/>, <see cref="P:CommandFramework.Managers.Models.IOptions.PrefixFS"/> or <see cref="P:CommandFramework.Managers.Models.IOptions.PrefixFSA"/>; not directly.
            </remarks>
        </member>
        <member name="P:CommandFramework.Managers.Models.CommandHandler.PrefixS">
            <inheritdoc/>
        </member>
        <member name="P:CommandFramework.Managers.Models.CommandHandler.PrefixSA">
            <inheritdoc/>
        </member>
        <member name="P:CommandFramework.Managers.Models.CommandHandler.PrefixFS">
            <inheritdoc/>
        </member>
        <member name="P:CommandFramework.Managers.Models.CommandHandler.PrefixFSA">
            <inheritdoc/>
        </member>
        <member name="P:CommandFramework.Managers.Models.CommandHandler.PromptOpts">
            <inheritdoc/>
        </member>
        <member name="P:CommandFramework.Managers.Models.CommandHandler.ShowChatTo">
            <inheritdoc/>
        </member>
        <member name="P:CommandFramework.Managers.Models.CommandHandler.ShowResponseTo">
            <inheritdoc/>
        </member>
        <member name="P:CommandFramework.Managers.Models.CommandHandler.IndividualCooldown">
            <inheritdoc/>
        </member>
        <member name="P:CommandFramework.Managers.Models.CommandHandler.CommandCooldown">
            <inheritdoc/>
        </member>
        <member name="P:CommandFramework.Managers.Models.CommandHandler.IgnoreCooldown">
            <inheritdoc/>
        </member>
        <member name="M:CommandFramework.Managers.Models.CommandHandler.Register(System.String)">
            <summary>
                Registers command modules.
            </summary>
            <param name="filePath">
                The filepath to the module you want to register.
            </param>
        </member>
        <member name="T:CommandFramework.Managers.Models.CommandOptions">
            <summary>
                Provides functionality to the <see cref="T:CommandFramework.Managers.Models.ICommandOptions"/> interface.
            </summary>
            <remarks>
                Implements <see cref="T:CommandFramework.Managers.Models.ICommandOptions"/>.
            </remarks>
        </member>
        <member name="P:CommandFramework.Managers.Models.CommandOptions.SplitAt">
            <inheritdoc/>
        </member>
        <member name="P:CommandFramework.Managers.Models.CommandOptions.Aliases">
            <inheritdoc/>
        </member>
        <member name="P:CommandFramework.Managers.Models.CommandOptions.Prefix">
            <summary>
                Gets the Prefix in object form.
            </summary>
            <remarks>
                Note: This should be grabbed via <see cref="P:CommandFramework.Managers.Models.CommandOptions.PrefixS"/>, <see cref="P:CommandFramework.Managers.Models.CommandOptions.PrefixSA"/>, <see cref="P:CommandFramework.Managers.Models.IOptions.PrefixFS"/> or <see cref="P:CommandFramework.Managers.Models.IOptions.PrefixFSA"/>; not directly.
            </remarks>
        </member>
        <member name="P:CommandFramework.Managers.Models.CommandOptions.PrefixS">
            <inheritdoc/>
        </member>
        <member name="P:CommandFramework.Managers.Models.CommandOptions.PrefixSA">
            <inheritdoc/>
        </member>
        <member name="P:CommandFramework.Managers.Models.CommandOptions.PrefixFS">
            <inheritdoc/>
        </member>
        <member name="P:CommandFramework.Managers.Models.CommandOptions.PrefixFSA">
            <inheritdoc/>
        </member>
        <member name="P:CommandFramework.Managers.Models.CommandOptions.Args">
            <inheritdoc/>
        </member>
        <member name="P:CommandFramework.Managers.Models.CommandOptions.PromptOpts">
            <inheritdoc/>
        </member>
        <member name="P:CommandFramework.Managers.Models.CommandOptions.ShowChatTo">
            <inheritdoc/>
        </member>
        <member name="P:CommandFramework.Managers.Models.CommandOptions.ShowResponseTo">
            <inheritdoc/>
        </member>
        <member name="P:CommandFramework.Managers.Models.CommandOptions.IndividualCooldown">
            <inheritdoc/>
        </member>
        <member name="P:CommandFramework.Managers.Models.CommandOptions.CommandCooldown">
            <inheritdoc/>
        </member>
        <member name="P:CommandFramework.Managers.Models.CommandOptions.IgnoreCooldown">
            <inheritdoc/>
        </member>
        <member name="M:CommandFramework.Managers.Models.CommandOptions.Set(CommandFramework.Managers.Models.ICommandOptions)">
            <summary>
                Sets all the properties in <see cref="T:CommandFramework.Managers.Models.Command"/>.
            </summary>
            <param name="commandOptions"> An instance of <see cref="T:CommandFramework.Managers.Models.ICommandHandlerOptions"/> you want to set the class to.</param>
            <returns> The updated class instance.</returns>
        </member>
        <member name="M:CommandFramework.Managers.Models.CommandOptions.Get">
            <summary>
                Gets all the properties in the form of a <see cref="T:CommandFramework.Managers.Models.ICommandOptions"/>.
            </summary>
            <returns>
                Returns a <see cref="T:CommandFramework.Managers.Models.ICommandOptions"/>.
            </returns>
        </member>
        <member name="T:CommandFramework.Managers.Models.Permissions">
            <summary>
                Provides functionality to the <see cref="T:CommandFramework.Managers.Models.IPermissions"/> interface.
            </summary>
            <remarks>
                Implements <see cref="T:CommandFramework.Managers.Models.IPermissions"/>.
            </remarks>
        </member>
        <member name="T:CommandFramework.Managers.Models.PromptOptions">
            <summary>
                Provides functionality to the <see cref="T:CommandFramework.Managers.Models.IPromptOptions"/> interface.
            </summary>
            <remarks>
                Implements <see cref="T:CommandFramework.Managers.Models.IPromptOptions"/>.
            </remarks>
        </member>
        <member name="P:CommandFramework.Managers.Models.PromptOptions.Start">
            <inheritdoc/>
        </member>
        <member name="P:CommandFramework.Managers.Models.PromptOptions.Retry">
            <inheritdoc/>
        </member>
        <member name="P:CommandFramework.Managers.Models.PromptOptions.Ended">
            <inheritdoc/>
        </member>
        <member name="P:CommandFramework.Managers.Models.PromptOptions.Cancel">
            <inheritdoc/>
        </member>
        <member name="P:CommandFramework.Managers.Models.PromptOptions.Cancelword">
            <inheritdoc/>
        </member>
        <member name="P:CommandFramework.Managers.Models.PromptOptions.Timeout">
            <inheritdoc/>
        </member>
        <member name="P:CommandFramework.Managers.Models.PromptOptions.Retries">
            <inheritdoc/>
        </member>
        <member name="P:CommandFramework.Managers.Models.PromptOptions.Time">
            <inheritdoc/>
        </member>
        <member name="P:CommandFramework.Managers.Models.PromptOptions.Stopword">
            <inheritdoc/>
        </member>
        <member name="P:CommandFramework.Managers.Models.PromptOptions.Infinite">
            <inheritdoc/>
        </member>
        <member name="P:CommandFramework.Managers.Models.PromptOptions.Limit">
            <inheritdoc/>
        </member>
        <member name="P:CommandFramework.Managers.Models.PromptOptions.Otherwise">
            <inheritdoc/>
        </member>
        <member name="T:CrewNodePlugin.CrewNodePlugin">
            <summary>
                Plugin class.
            </summary>
            <remarks>
                The main class, gets called first. Implements the <see cref="T:Impostor.Api.Plugins.PluginBase"/> class.
            </remarks>
        </member>
        <member name="F:CrewNodePlugin.CrewNodePlugin.Debug">
            <summary>
                Indicates whether the program is in debug mode or not.
            </summary>
        </member>
        <member name="F:CrewNodePlugin.CrewNodePlugin.logger">
            <summary>
                Holds an instance of the <see cref="T:Microsoft.Extensions.Logging.ILogger"/>.
            </summary>
            <remarks>
                Used to log any messages to the server console.
            </remarks>
        </member>
        <member name="F:CrewNodePlugin.CrewNodePlugin.eventManager">
            <summary>
                Holds an instance of <see cref="T:Impostor.Api.Events.Managers.IEventManager"/>.
            </summary>
            <remarks>
                Used to initialize the Event listeners and hook to them.
            </remarks>
        </member>
        <member name="F:CrewNodePlugin.CrewNodePlugin.unregister">
            <summary>
                Holds a list of all the modules that need to be disposed of afterwards.
            </summary>
            <remarks>
                Used to dispose of listeners after the server has closed.
            </remarks>
        </member>
        <member name="M:CrewNodePlugin.CrewNodePlugin.#ctor(Microsoft.Extensions.Logging.ILogger{CrewNodePlugin.CrewNodePlugin},Impostor.Api.Events.Managers.IEventManager)">
            <summary>
                Initializes a new instance of the <see cref="T:CrewNodePlugin.CrewNodePlugin"/> class.
            </summary>
            <param name="logger"> An instance of the servers <see cref="T:Microsoft.Extensions.Logging.ILogger"/>. </param>
            <param name="eventManager"> An instance of the servers <see cref="T:Impostor.Api.Events.Managers.IEventManager"/>. </param>
        </member>
        <member name="M:CrewNodePlugin.CrewNodePlugin.EnableAsync">
             <summary>
                 Enables/Registers listeners to the <see cref="F:CrewNodePlugin.CrewNodePlugin.eventManager"/>.
             </summary>
            
             <returns>
                 Returns the base EnableAsync.
             </returns>
            
             See <see cref="M:CrewNodePlugin.CrewNodePlugin.DisableAsync"/> to disable the modules.
        </member>
        <member name="M:CrewNodePlugin.CrewNodePlugin.DisableAsync">
             <summary>
                 Disables/Disposes of listeners in the <see cref="F:CrewNodePlugin.CrewNodePlugin.unregister"/> array.
             </summary>
            
             <returns>
                 Returns the base DisableAsync.
             </returns>
            
             See <see cref="M:CrewNodePlugin.CrewNodePlugin.EnableAsync"/> to enable the modules.
        </member>
        <member name="T:CrewNodePlugin.CommandListener">
            <summary>
                Command Listener, listens for chat commands.
            </summary>
            <remarks>
                Gives the <see cref="T:CommandFramework.Managers.Models.Command"/> class its listner functionality.
            </remarks>
        </member>
        <member name="F:CrewNodePlugin.CommandListener.logger">
            <summary>
                Holds an instance of the <see cref="T:Microsoft.Extensions.Logging.ILogger"/>.
            </summary>
            <remarks>
                Used to log any messages to the server console.
            </remarks>
        </member>
        <member name="M:CrewNodePlugin.CommandListener.#ctor(Microsoft.Extensions.Logging.ILogger{CrewNodePlugin.CrewNodePlugin})">
            <summary>
            Initializes a new instance of the <see cref="T:CrewNodePlugin.CommandListener"/> class.
            </summary>
            <param name="logger"> An instance of the servers <see cref="T:Microsoft.Extensions.Logging.ILogger"/>. </param>
        </member>
        <member name="T:CrewNodePlugin.TempClass">
            <summary>
                Temporary class soon to be removed.
            </summary>
        </member>
        <member name="M:CrewNodePlugin.TempClass.Init">
            <summary>
            Temporary class.
            </summary>
        </member>
    </members>
</doc>
